{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","newItem","list","key","value","this","setState","id","Math","random","slice","push","updatedList","filter","item","className","type","placeholder","onChange","e","updateInput","target","onClick","addItem","map","deleteItem","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2OAmGeA,G,wDA/Fb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAEDC,MAAO,CACVC,QAAS,GACTC,KAAM,IALQ,E,wDAUNC,EAAKC,GAEfC,KAAKC,SAAL,eACGH,EAAMC,M,gCAQT,IAAMH,EAAQ,CACZM,GAAI,EAAIC,KAAKC,SACbL,MAAOC,KAAKL,MAAMC,QAAQS,SAItBR,EAAI,YAAOG,KAAKL,MAAME,MAG5BA,EAAKS,KAAKV,GAGVI,KAAKC,SAAS,CACZJ,OACAD,QAAQ,O,iCAIDM,GAET,IAGMK,EAHI,YAAOP,KAAKL,MAAME,MAGHW,QAAO,SAAAC,GAAI,OAAIA,EAAKP,KAAOA,KAEpDF,KAAKC,SAAS,CAACJ,KAAMU,M,+BAGb,IAAD,OACP,OACE,yBAAKG,UAAU,OAAf,IACA,yBAAKA,UAAU,SAAf,oBAGE,6BACA,yBAAKA,UAAU,WAAf,8BAGC,6BAEA,2BACGC,KAAK,OACLC,YAAY,iBACZb,MAAOC,KAAKL,MAAMC,QAClBiB,SAAU,SAAAC,GAAC,OAAI,EAAKC,YAAY,UAAWD,EAAEE,OAAOjB,UAGtD,4BACEkB,QAAS,kBAAM,EAAKC,YADtB,OAMA,6BACA,yDACClB,KAAKL,MAAME,KAAKsB,KAAI,SAAAV,GACrB,OACE,wBAAIX,IAAKW,EAAKP,IAAd,WACGO,EAAKV,MACN,4BACEkB,QAAS,kBAAM,EAAKG,WAAWX,EAAKP,MADtC,gB,GAjFImB,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.073ae944.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport './style.css'\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n\n    this.state ={\n      newItem: '', //current item\n      list: []  //state for our list of items\n    }\n  }\n\n  //using local storage in project, sets a key value pair for every input\n  updateInput(key, value){\n    //update react state\n    this.setState({\n      [key]: value\n    })\n  }\n\n\n  //this function adds a item to our toDo list\n  addItem(){\n    //create the item with its own specific id\n    const newItem={\n      id: 1 + Math.random(), //give the unique id\n      value: this.state.newItem.slice() //copy the newitem in state\n    }\n\n    //copy the current list of the items\n    const list = [...this.state.list]\n\n    //add new item to end of list\n    list.push(newItem)\n\n    //UPDate the state with the list, and reset the item, so user can add new item\n    this.setState({\n      list, //gives the new list with added item\n      newItem:'' //resets the new item so user can put another item\n    })\n  }\n\n  deleteItem(id){\n    //copy the current list of the items\n    const list = [...this.state.list]\n\n    //filter out item being updated\n    const updatedList = list.filter(item => item.id !== id)\n\n    this.setState({list: updatedList}) //sets the new state as the new updated list with the deleted item\n  }\n\n  render() {\n    return (\n      <div className=\"App\"> {/* remember in JSX classname is the same as class in HTML*/}\n      <div className=\"title\">\n      MY MUST DO LIST:\n      </div>\n        <div>\n        <div className=\"additem\">         {/* lets the user know to add an item */}\n         Add an item...\n         </div>\n         <br/>\n                    {/* input form */}\n         <input\n            type=\"text\"                     //type of input\n            placeholder=\"Type item here\"\n            value={this.state.newItem}      //the value will take on a new item everytime a user adds that to input\n            onChange={e => this.updateInput(\"newItem\", e.target.value)} //this function will be called everytime the onchange is ran\n          />\n\n          <button\n            onClick={() => this.addItem()} //button adds the text of user inputs in input (field), that will contain a onclick\n                                           //will call a function additem everytime its clicked\n          >\n            Add\n          </button>\n          <br/>\n          <ul>                          {/* mapp over the list current items in the list, the ones we can delete */}\n          {this.state.list.map(item => {\n          return(\n            <li key={item.id}>        {/* we are mapping over the items, so we must include a key/id as every id is unique */}\n              {item.value}\n              <button\n                onClick={() => this.deleteItem(item.id)} //we are adding a delete button to each item in the list\n              >\n              X\n              </button>\n            </li>\n          )\n        })}\n          </ul>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}